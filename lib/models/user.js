// Generated by CoffeeScript 1.4.0
(function() {
  var Project, Schema, User, mongoose;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  Project = require('./project').Model;

  User = new Schema({
    username: {
      type: String,
      unique: true,
      required: true
    },
    password: String
  });

  User.methods.validPassword = function(password, done) {
    if (this.password === password) {
      return done(null, this);
    } else {
      return done(null, false, {
        message: 'Invalid Password'
      });
    }
  };

  User.methods.getProjects = function(cb) {
    return Project.find({
      'users.username': this.username
    }).exec(function(err, projects) {
      if (err) {
        return cb(err);
      } else {
        return cb(null, projects);
      }
    });
  };

  User.methods.isManager = function(project, cb) {
    var username;
    username = this.username;
    return Project.findOne({
      'name': project
    }).exec(function(err, project) {
      var count, index, user, _i, _len, _ref;
      index = -1;
      count = 0;
      _ref = project.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.username === username) {
          index = count;
        }
        count++;
      }
      if (index !== -1) {
        return cb(project.users[index].role === 'manager');
      } else {
        return cb(false);
      }
    });
  };

  User.methods.isMember = function(project, cb) {
    var username;
    username = this.username;
    return Project.findOne({
      'name': project
    }).exec(function(err, project) {
      var count, index, user, _i, _len, _ref;
      index = -1;
      count = 0;
      _ref = project.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.username === username) {
          index = count;
        }
        count++;
      }
      return cb(index !== -1);
    });
  };

  exports.Model = mongoose.model('user', User);

  exports.Schema = User;

}).call(this);
