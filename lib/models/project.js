// Generated by CoffeeScript 1.4.0
(function() {
  var ObjectId, Project, ProjectUser, Requirement, Schema, mongoose, roles;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  Requirement = require('./requirement');

  roles = ['manager', 'member'];

  ProjectUser = new Schema({
    username: {
      type: String,
      required: true
    },
    role: {
      type: String,
      "enum": roles
    }
  });

  Project = new Schema({
    name: {
      type: String,
      unique: true,
      required: true
    },
    description: String,
    users: [ProjectUser],
    estimation: {
      cocomo: {
        mode: {
          type: String,
          "default": 'organic'
        },
        factors: {
          RELY: Number,
          DATA: Number,
          CPLX: Number,
          TIME: Number,
          STOR: Number,
          VIRT: Number,
          TURN: Number,
          ACAP: Number,
          AEXP: Number,
          PCAP: Number,
          VEXP: Number,
          LEXP: Number,
          MODP: Number,
          TOOL: Number,
          SCED: Number
        }
      },
      FP: {
        primary: {
          Input: Number,
          Output: Number,
          Inquiry: Number,
          File: Number,
          Interface: Number
        },
        influence: {
          dataCommunications: Number,
          distributedData: Number,
          performance: Number,
          hardware: Number,
          transactionRate: Number,
          onlineDataEntry: Number,
          endUserEfficiency: Number,
          onlineUpdate: Number,
          computation: Number,
          reusability: Number,
          installation: Number,
          operation: Number,
          portability: Number,
          maintainability: Number
        }
      }
    },
    requirements: [Requirement.Schema]
  });

  Project.virtual('estimation.loc').get(function() {
    var loc, requirement, _i, _len, _ref;
    loc = 0;
    _ref = this.requirements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      requirement = _ref[_i];
      loc += requirement.estimation.loc;
    }
    return loc;
  });

  Project.virtual('actual.loc').get(function() {
    var loc, requirement, _i, _len, _ref;
    loc = 0;
    _ref = this.requirements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      requirement = _ref[_i];
      loc += requirement.actual.loc;
    }
    return loc;
  });

  Project.virtual('estimation.time').get(function() {
    var requirement, time, _i, _len, _ref;
    time = 0;
    _ref = this.requirements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      requirement = _ref[_i];
      time += requirement.estimation.time;
    }
    return time;
  });

  Project.virtual('actual.time').get(function() {
    var requirement, time, _i, _len, _ref;
    time = 0;
    _ref = this.requirements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      requirement = _ref[_i];
      time += requirement.actual.time;
    }
    return time;
  });

  Project.virtual('estimation.cocomo.effort').get(function() {
    var a, b, f, prodF;
    switch (this.estimation.cocomo.mode) {
      case 'organic':
        a = 3.2;
        b = 1.05;
        break;
      case 'semi-detached':
        a = 3.0;
        b = 1.12;
        break;
      case 'embedded':
        a = 2.8;
        b = 1.2;
    }
    f = this.estimation.cocomo.factors;
    prodF = f.RELY * f.DATA * f.CPLX * f.TIME * f.STOR * f.VIRT * f.TURN * f.ACAP * f.AEXP * f.PCAP * f.VEXP * f.LEXP * f.MODP * f.TOOL * f.SCED;
    return a * Math.pow(this.estimation.loc / 1000, b) * prodF;
  });

  Project.virtual('estimation.cocomo.time').get(function() {
    var c, d;
    switch (this.estimation.cocomo.mode) {
      case 'organic':
        c = 2.5;
        d = 0.38;
        break;
      case 'semi-detached':
        c = 2.5;
        d = 0.35;
        break;
      case 'embedded':
        c = 2.5;
        d = 0.32;
    }
    return c * Math.pow(this.estimation.cocomo.effort, d);
  });

  exports.Model = mongoose.model('project', Project);

  exports.Schema = Project;

}).call(this);
