// Generated by CoffeeScript 1.4.0
(function() {
  var Auth, Project;

  Auth = require('./auth');

  Project = require('../models/project').Model;

  module.exports = function(app) {
    app.get('/projects/:project/requirements/new', function(req, res) {
      return Auth.manager(req, res, '/projects/' + req.params.project, function() {
        return res.render('requirement/new');
      });
    });
    app.post('/projects/:project/requirements', function(req, res) {
      return Auth.manager(req, res, '/projects/' + req.params.project, function() {
        var reqUsers, user, _i, _len, _ref;
        reqUsers = [];
        if (req.body.users instanceof Array) {
          _ref = req.body.users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            reqUsers.push({
              username: user
            });
          }
        } else {
          reqUsers.push({
            username: req.body.users
          });
        }
        req.project.requirements.push({
          name: req.body.name,
          description: req.body.description,
          estimation: {
            loc: req.body.loc,
            FP: req.body.FP,
            date: {
              start: req.body.start,
              end: req.body.end
            },
            time: req.body.time
          },
          users: reqUsers
        });
        return req.project.save(function(err) {
          if (!err) {
            res.flash('success', 'New requirement added.');
            return res.redirect('/projects/' + req.params.project);
          } else {
            res.flash('error', err);
            return res.redirect('/projects/' + req.params.project);
          }
        });
      });
    });
    app["delete"]('/projects/:project/requirements', function(req, res) {});
    app.get('/projects/:project/requirements/:requirement', function(req, res) {
      return Auth.member(req, res, '/projects/' + req.params.project, function() {
        return res.render('requirement/index');
      });
    });
    app.get('/projects/:project/requirements/:requirement/edit', function(req, res) {});
    app.post('/projects/:project/requirements/:requirement/users', function(req, res) {});
    app.get('/projects/:project/requirements/:requirement/users', function(req, res) {});
    app.get('/projects/:project/requirements/:requirement/user/:username', function(req, res) {});
    app.put('/projects/:project/requirements/:requirement/users/:username', function(req, res) {});
    app["delete"]('/projects/:project/requirements/:requirement/users', function(req, res) {});
    app.post('/projects/:project/requirements/:requirement/users/:username/work', function(req, res) {
      return Auth.member(req, res, '/projects/' + req.params.project, function() {
        var reqUser, reqUserTmp, _i, _len, _ref;
        reqUser = null;
        _ref = req.requirement.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          reqUserTmp = _ref[_i];
          if (reqUserTmp.username = req.params.username) {
            reqUser = reqUserTmp;
          }
        }
        reqUser.work.push({
          desc: req.body.description,
          date: req.body.date,
          time: req.body.time
        });
        return req.project.save(function(err) {
          if (!err) {
            res.flash('success', 'Work added to requirement.');
            return res.redirect('/projects/' + req.params.project + '/requirements/' + req.params.requirement);
          } else {
            res.flash('error', err.toString());
            return res.redirect('/projects/' + req.params.project + '/requirements/' + req.params.requirement);
          }
        });
      });
    });
    return app["delete"]('/projects/:project/requirements/:requirement/users/:username/work', function(req, res) {});
  };

}).call(this);
